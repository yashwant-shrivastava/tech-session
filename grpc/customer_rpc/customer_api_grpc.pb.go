// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: grpc/customer_rpc/customer_api.proto

package customer_rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	CustomerAPI_GetCustomerById_FullMethodName           = "/grpc.customer_rpc.CustomerAPI/GetCustomerById"
	CustomerAPI_GetCustomerByIds_FullMethodName          = "/grpc.customer_rpc.CustomerAPI/GetCustomerByIds"
	CustomerAPI_GetCustomerInterests_FullMethodName      = "/grpc.customer_rpc.CustomerAPI/GetCustomerInterests"
	CustomerAPI_GetCustomerInterestsByIds_FullMethodName = "/grpc.customer_rpc.CustomerAPI/GetCustomerInterestsByIds"
)

// CustomerAPIClient is the client API for CustomerAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomerAPIClient interface {
	GetCustomerById(ctx context.Context, in *GetCustomerByIdRequest, opts ...grpc.CallOption) (*GetCustomerByIdResponse, error)
	GetCustomerByIds(ctx context.Context, opts ...grpc.CallOption) (CustomerAPI_GetCustomerByIdsClient, error)
	GetCustomerInterests(ctx context.Context, in *GetCustomerInterestsRequest, opts ...grpc.CallOption) (CustomerAPI_GetCustomerInterestsClient, error)
	GetCustomerInterestsByIds(ctx context.Context, opts ...grpc.CallOption) (CustomerAPI_GetCustomerInterestsByIdsClient, error)
}

type customerAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomerAPIClient(cc grpc.ClientConnInterface) CustomerAPIClient {
	return &customerAPIClient{cc}
}

func (c *customerAPIClient) GetCustomerById(ctx context.Context, in *GetCustomerByIdRequest, opts ...grpc.CallOption) (*GetCustomerByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCustomerByIdResponse)
	err := c.cc.Invoke(ctx, CustomerAPI_GetCustomerById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerAPIClient) GetCustomerByIds(ctx context.Context, opts ...grpc.CallOption) (CustomerAPI_GetCustomerByIdsClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CustomerAPI_ServiceDesc.Streams[0], CustomerAPI_GetCustomerByIds_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &customerAPIGetCustomerByIdsClient{ClientStream: stream}
	return x, nil
}

type CustomerAPI_GetCustomerByIdsClient interface {
	Send(*GetCustomerByIdRequest) error
	CloseAndRecv() (*GetCustomerByIdsResponse, error)
	grpc.ClientStream
}

type customerAPIGetCustomerByIdsClient struct {
	grpc.ClientStream
}

func (x *customerAPIGetCustomerByIdsClient) Send(m *GetCustomerByIdRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *customerAPIGetCustomerByIdsClient) CloseAndRecv() (*GetCustomerByIdsResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(GetCustomerByIdsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *customerAPIClient) GetCustomerInterests(ctx context.Context, in *GetCustomerInterestsRequest, opts ...grpc.CallOption) (CustomerAPI_GetCustomerInterestsClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CustomerAPI_ServiceDesc.Streams[1], CustomerAPI_GetCustomerInterests_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &customerAPIGetCustomerInterestsClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CustomerAPI_GetCustomerInterestsClient interface {
	Recv() (*GetCustomerInterestsResponse, error)
	grpc.ClientStream
}

type customerAPIGetCustomerInterestsClient struct {
	grpc.ClientStream
}

func (x *customerAPIGetCustomerInterestsClient) Recv() (*GetCustomerInterestsResponse, error) {
	m := new(GetCustomerInterestsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *customerAPIClient) GetCustomerInterestsByIds(ctx context.Context, opts ...grpc.CallOption) (CustomerAPI_GetCustomerInterestsByIdsClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CustomerAPI_ServiceDesc.Streams[2], CustomerAPI_GetCustomerInterestsByIds_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &customerAPIGetCustomerInterestsByIdsClient{ClientStream: stream}
	return x, nil
}

type CustomerAPI_GetCustomerInterestsByIdsClient interface {
	Send(*GetCustomerByIdRequest) error
	Recv() (*GetCustomerInterestsResponse, error)
	grpc.ClientStream
}

type customerAPIGetCustomerInterestsByIdsClient struct {
	grpc.ClientStream
}

func (x *customerAPIGetCustomerInterestsByIdsClient) Send(m *GetCustomerByIdRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *customerAPIGetCustomerInterestsByIdsClient) Recv() (*GetCustomerInterestsResponse, error) {
	m := new(GetCustomerInterestsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CustomerAPIServer is the server API for CustomerAPI service.
// All implementations must embed UnimplementedCustomerAPIServer
// for forward compatibility
type CustomerAPIServer interface {
	GetCustomerById(context.Context, *GetCustomerByIdRequest) (*GetCustomerByIdResponse, error)
	GetCustomerByIds(CustomerAPI_GetCustomerByIdsServer) error
	GetCustomerInterests(*GetCustomerInterestsRequest, CustomerAPI_GetCustomerInterestsServer) error
	GetCustomerInterestsByIds(CustomerAPI_GetCustomerInterestsByIdsServer) error
	mustEmbedUnimplementedCustomerAPIServer()
}

// UnimplementedCustomerAPIServer must be embedded to have forward compatible implementations.
type UnimplementedCustomerAPIServer struct {
}

func (UnimplementedCustomerAPIServer) GetCustomerById(context.Context, *GetCustomerByIdRequest) (*GetCustomerByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerById not implemented")
}
func (UnimplementedCustomerAPIServer) GetCustomerByIds(CustomerAPI_GetCustomerByIdsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCustomerByIds not implemented")
}
func (UnimplementedCustomerAPIServer) GetCustomerInterests(*GetCustomerInterestsRequest, CustomerAPI_GetCustomerInterestsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCustomerInterests not implemented")
}
func (UnimplementedCustomerAPIServer) GetCustomerInterestsByIds(CustomerAPI_GetCustomerInterestsByIdsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCustomerInterestsByIds not implemented")
}
func (UnimplementedCustomerAPIServer) mustEmbedUnimplementedCustomerAPIServer() {}

// UnsafeCustomerAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomerAPIServer will
// result in compilation errors.
type UnsafeCustomerAPIServer interface {
	mustEmbedUnimplementedCustomerAPIServer()
}

func RegisterCustomerAPIServer(s grpc.ServiceRegistrar, srv CustomerAPIServer) {
	s.RegisterService(&CustomerAPI_ServiceDesc, srv)
}

func _CustomerAPI_GetCustomerById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomerByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerAPIServer).GetCustomerById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerAPI_GetCustomerById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerAPIServer).GetCustomerById(ctx, req.(*GetCustomerByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerAPI_GetCustomerByIds_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CustomerAPIServer).GetCustomerByIds(&customerAPIGetCustomerByIdsServer{ServerStream: stream})
}

type CustomerAPI_GetCustomerByIdsServer interface {
	SendAndClose(*GetCustomerByIdsResponse) error
	Recv() (*GetCustomerByIdRequest, error)
	grpc.ServerStream
}

type customerAPIGetCustomerByIdsServer struct {
	grpc.ServerStream
}

func (x *customerAPIGetCustomerByIdsServer) SendAndClose(m *GetCustomerByIdsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *customerAPIGetCustomerByIdsServer) Recv() (*GetCustomerByIdRequest, error) {
	m := new(GetCustomerByIdRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CustomerAPI_GetCustomerInterests_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetCustomerInterestsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CustomerAPIServer).GetCustomerInterests(m, &customerAPIGetCustomerInterestsServer{ServerStream: stream})
}

type CustomerAPI_GetCustomerInterestsServer interface {
	Send(*GetCustomerInterestsResponse) error
	grpc.ServerStream
}

type customerAPIGetCustomerInterestsServer struct {
	grpc.ServerStream
}

func (x *customerAPIGetCustomerInterestsServer) Send(m *GetCustomerInterestsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CustomerAPI_GetCustomerInterestsByIds_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CustomerAPIServer).GetCustomerInterestsByIds(&customerAPIGetCustomerInterestsByIdsServer{ServerStream: stream})
}

type CustomerAPI_GetCustomerInterestsByIdsServer interface {
	Send(*GetCustomerInterestsResponse) error
	Recv() (*GetCustomerByIdRequest, error)
	grpc.ServerStream
}

type customerAPIGetCustomerInterestsByIdsServer struct {
	grpc.ServerStream
}

func (x *customerAPIGetCustomerInterestsByIdsServer) Send(m *GetCustomerInterestsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *customerAPIGetCustomerInterestsByIdsServer) Recv() (*GetCustomerByIdRequest, error) {
	m := new(GetCustomerByIdRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CustomerAPI_ServiceDesc is the grpc.ServiceDesc for CustomerAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CustomerAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.customer_rpc.CustomerAPI",
	HandlerType: (*CustomerAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCustomerById",
			Handler:    _CustomerAPI_GetCustomerById_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetCustomerByIds",
			Handler:       _CustomerAPI_GetCustomerByIds_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetCustomerInterests",
			Handler:       _CustomerAPI_GetCustomerInterests_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetCustomerInterestsByIds",
			Handler:       _CustomerAPI_GetCustomerInterestsByIds_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "grpc/customer_rpc/customer_api.proto",
}
